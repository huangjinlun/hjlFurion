// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pear.EntityFramework.Core;

namespace Pear.Database.Migrations.Migrations
{
    [DbContext(typeof(PearDbContext))]
    [Migration("20210123024547_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Pear.Core.ClassTeacher", b =>
                {
                    b.Property<int>("SchoolClassId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("SchoolClassId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ClassTeacher");
                });

            modelBuilder.Entity("Pear.Core.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4");

                    b.Property<string>("Remark")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2020, 12, 17, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Enabled = true,
                            IsDeleted = false,
                            Name = "超级管理员",
                            Remark = "拥有所有权限"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTimeOffset(new DateTime(2020, 12, 17, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Enabled = true,
                            IsDeleted = false,
                            Name = "测试用户",
                            Remark = "只有测试权限"
                        });
                });

            modelBuilder.Entity("Pear.Core.RoleSecurity", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "SecurityId");

                    b.HasIndex("SecurityId");

                    b.ToTable("RoleSecurity");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            SecurityId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            SecurityId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            SecurityId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            SecurityId = 4
                        },
                        new
                        {
                            RoleId = 1,
                            SecurityId = 5
                        },
                        new
                        {
                            RoleId = 1,
                            SecurityId = 6
                        },
                        new
                        {
                            RoleId = 1,
                            SecurityId = 7
                        },
                        new
                        {
                            RoleId = 1,
                            SecurityId = 8
                        },
                        new
                        {
                            RoleId = 1,
                            SecurityId = 9
                        },
                        new
                        {
                            RoleId = 1,
                            SecurityId = 10
                        },
                        new
                        {
                            RoleId = 1,
                            SecurityId = 11
                        },
                        new
                        {
                            RoleId = 1,
                            SecurityId = 12
                        },
                        new
                        {
                            RoleId = 1,
                            SecurityId = 13
                        },
                        new
                        {
                            RoleId = 1,
                            SecurityId = 14
                        },
                        new
                        {
                            RoleId = 1,
                            SecurityId = 15
                        },
                        new
                        {
                            RoleId = 1,
                            SecurityId = 16
                        },
                        new
                        {
                            RoleId = 1,
                            SecurityId = 17
                        },
                        new
                        {
                            RoleId = 1,
                            SecurityId = 18
                        },
                        new
                        {
                            RoleId = 1,
                            SecurityId = 19
                        },
                        new
                        {
                            RoleId = 1,
                            SecurityId = 20
                        },
                        new
                        {
                            RoleId = 1,
                            SecurityId = 21
                        });
                });

            modelBuilder.Entity("Pear.Core.SchoolClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClassName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("SchoolClass");
                });

            modelBuilder.Entity("Pear.Core.Security", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Security");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2020, 12, 22, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Enabled = true,
                            IsDeleted = false,
                            Remark = "user.service.profile.self",
                            UniqueName = "user.service.profile.self"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTimeOffset(new DateTime(2020, 12, 22, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Enabled = true,
                            IsDeleted = false,
                            Remark = "user.service.profile",
                            UniqueName = "user.service.profile"
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTimeOffset(new DateTime(2020, 12, 22, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Enabled = true,
                            IsDeleted = false,
                            Remark = "user.service.list",
                            UniqueName = "user.service.list"
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTimeOffset(new DateTime(2020, 12, 22, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Enabled = true,
                            IsDeleted = false,
                            Remark = "user.service.modify.self",
                            UniqueName = "user.service.modify.self"
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTimeOffset(new DateTime(2020, 12, 22, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Enabled = true,
                            IsDeleted = false,
                            Remark = "user.service.modify",
                            UniqueName = "user.service.modify"
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTimeOffset(new DateTime(2020, 12, 22, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Enabled = true,
                            IsDeleted = false,
                            Remark = "user.service.delete",
                            UniqueName = "user.service.delete"
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTimeOffset(new DateTime(2020, 12, 22, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Enabled = true,
                            IsDeleted = false,
                            Remark = "user.service.add",
                            UniqueName = "user.service.add"
                        },
                        new
                        {
                            Id = 8,
                            CreatedTime = new DateTimeOffset(new DateTime(2020, 12, 22, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Enabled = true,
                            IsDeleted = false,
                            Remark = "user.service.change.password",
                            UniqueName = "user.service.change.password"
                        },
                        new
                        {
                            Id = 9,
                            CreatedTime = new DateTimeOffset(new DateTime(2020, 12, 22, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Enabled = true,
                            IsDeleted = false,
                            Remark = "user.service.roles.self",
                            UniqueName = "user.service.roles.self"
                        },
                        new
                        {
                            Id = 10,
                            CreatedTime = new DateTimeOffset(new DateTime(2020, 12, 22, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Enabled = true,
                            IsDeleted = false,
                            Remark = "user.service.roles",
                            UniqueName = "user.service.roles"
                        },
                        new
                        {
                            Id = 11,
                            CreatedTime = new DateTimeOffset(new DateTime(2020, 12, 22, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Enabled = true,
                            IsDeleted = false,
                            Remark = "user.service.securities.self",
                            UniqueName = "user.service.securities.self"
                        },
                        new
                        {
                            Id = 12,
                            CreatedTime = new DateTimeOffset(new DateTime(2020, 12, 22, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Enabled = true,
                            IsDeleted = false,
                            Remark = "user.service.securities",
                            UniqueName = "user.service.securities"
                        },
                        new
                        {
                            Id = 13,
                            CreatedTime = new DateTimeOffset(new DateTime(2020, 12, 22, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Enabled = true,
                            IsDeleted = false,
                            Remark = "role.service.list",
                            UniqueName = "role.service.list"
                        },
                        new
                        {
                            Id = 14,
                            CreatedTime = new DateTimeOffset(new DateTime(2020, 12, 22, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Enabled = true,
                            IsDeleted = false,
                            Remark = "role.service.add",
                            UniqueName = "role.service.add"
                        },
                        new
                        {
                            Id = 15,
                            CreatedTime = new DateTimeOffset(new DateTime(2020, 12, 22, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Enabled = true,
                            IsDeleted = false,
                            Remark = "role.service.modify",
                            UniqueName = "role.service.modify"
                        },
                        new
                        {
                            Id = 16,
                            CreatedTime = new DateTimeOffset(new DateTime(2020, 12, 22, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Enabled = true,
                            IsDeleted = false,
                            Remark = "role.service.delete",
                            UniqueName = "role.service.delete"
                        },
                        new
                        {
                            Id = 17,
                            CreatedTime = new DateTimeOffset(new DateTime(2020, 12, 22, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Enabled = true,
                            IsDeleted = false,
                            Remark = "role.service.give",
                            UniqueName = "role.service.give"
                        },
                        new
                        {
                            Id = 18,
                            CreatedTime = new DateTimeOffset(new DateTime(2020, 12, 22, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Enabled = true,
                            IsDeleted = false,
                            Remark = "security.service.list",
                            UniqueName = "security.service.list"
                        },
                        new
                        {
                            Id = 19,
                            CreatedTime = new DateTimeOffset(new DateTime(2020, 12, 22, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Enabled = true,
                            IsDeleted = false,
                            Remark = "security.service.give",
                            UniqueName = "security.service.give"
                        },
                        new
                        {
                            Id = 20,
                            CreatedTime = new DateTimeOffset(new DateTime(2020, 12, 22, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Enabled = true,
                            IsDeleted = false,
                            Remark = "security.service.refresh",
                            UniqueName = "security.service.refresh"
                        },
                        new
                        {
                            Id = 21,
                            CreatedTime = new DateTimeOffset(new DateTime(2020, 12, 22, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Enabled = true,
                            IsDeleted = false,
                            Remark = "security.service.all",
                            UniqueName = "security.service.all"
                        });
                });

            modelBuilder.Entity("Pear.Core.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("SchoolClassId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("SchoolClassId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("Pear.Core.SystemData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4");

                    b.Property<string>("Remark")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SystemData");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2020, 12, 22, 15, 30, 20, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Enabled = true,
                            IsDeleted = false,
                            Name = "男",
                            Remark = "男",
                            Sequence = 0
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2020, 12, 22, 15, 30, 20, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Enabled = true,
                            IsDeleted = false,
                            Name = "女",
                            Remark = "女",
                            Sequence = 1
                        });
                });

            modelBuilder.Entity("Pear.Core.SystemDataCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("HigherId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4");

                    b.Property<string>("Remark")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("HigherId");

                    b.ToTable("SystemDataCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2020, 12, 22, 15, 30, 20, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Enabled = true,
                            IsDeleted = false,
                            Name = "性别",
                            Remark = "性别",
                            Sequence = 0
                        });
                });

            modelBuilder.Entity("Pear.Core.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TeacherName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("Pear.Core.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nickname")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4");

                    b.Property<string>("Photo")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("SigninedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Synopsis")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Account = "admin",
                            CreatedTime = new DateTimeOffset(new DateTime(2020, 12, 17, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Enabled = true,
                            Gender = 0,
                            IsDeleted = false,
                            Password = "21232f297a57a5a743894a0e4a801fc3",
                            SigninedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Pear.Core.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Pear.Core.ClassTeacher", b =>
                {
                    b.HasOne("Pear.Core.SchoolClass", "SchoolClass")
                        .WithMany("ClassTeachers")
                        .HasForeignKey("SchoolClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pear.Core.Teacher", "Teacher")
                        .WithMany("ClassTeachers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchoolClass");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Pear.Core.RoleSecurity", b =>
                {
                    b.HasOne("Pear.Core.Role", "Role")
                        .WithMany("RoleSecurities")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pear.Core.Security", "Security")
                        .WithMany("RoleSecurities")
                        .HasForeignKey("SecurityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Security");
                });

            modelBuilder.Entity("Pear.Core.Student", b =>
                {
                    b.HasOne("Pear.Core.SchoolClass", "SchoolClass")
                        .WithMany()
                        .HasForeignKey("SchoolClassId");

                    b.Navigation("SchoolClass");
                });

            modelBuilder.Entity("Pear.Core.SystemData", b =>
                {
                    b.HasOne("Pear.Core.SystemDataCategory", "Category")
                        .WithMany("Data")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Pear.Core.SystemDataCategory", b =>
                {
                    b.HasOne("Pear.Core.SystemDataCategory", "Higher")
                        .WithMany("Sublevels")
                        .HasForeignKey("HigherId");

                    b.Navigation("Higher");
                });

            modelBuilder.Entity("Pear.Core.UserRole", b =>
                {
                    b.HasOne("Pear.Core.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pear.Core.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pear.Core.Role", b =>
                {
                    b.Navigation("RoleSecurities");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Pear.Core.SchoolClass", b =>
                {
                    b.Navigation("ClassTeachers");
                });

            modelBuilder.Entity("Pear.Core.Security", b =>
                {
                    b.Navigation("RoleSecurities");
                });

            modelBuilder.Entity("Pear.Core.SystemDataCategory", b =>
                {
                    b.Navigation("Data");

                    b.Navigation("Sublevels");
                });

            modelBuilder.Entity("Pear.Core.Teacher", b =>
                {
                    b.Navigation("ClassTeachers");
                });

            modelBuilder.Entity("Pear.Core.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
